@import '../assets/fonts/ui/fonts.css';
@import './utilities.css';

html,
body {
    height: 100vh;
    overflow: hidden;
}
#root {
    height: 100%;
}
#window {
    height: 100%;
}

/* 
    # Pseudo Custom Element Styles:

    The following CSS is meant to be used with "pseudo custom elements". 
    These are new HTML tags that aren’t React components, but also not real defined Custom Elements. 
    These are simply used instead of CSS classes because it’s semantically easier to understand 
    what’s going on compared to a <div> soup.  
*/

/* Layout: Horizontal Stack */

custom-h-stack {
    display: flex;
    flex-direction: row;
    justify-content: stretch;
}
custom-h-stack[stretch-children='true'] > * {
    width: 100%;
}

/* Layout: Vertical Stack */

custom-v-stack {
    display: flex;
    flex-direction: column;
}

/* Custom Line (Divider) */

custom-line {
    display: block;
    height: 1px;
    flex-shrink: 0;
    background: rgba(0, 0, 0, 0.08);
}

/* Scope Button */

custom-scope-button {
    display: inline-block;
    line-height: 1;
    padding: 4px 8px;
    border-radius: 100px;
    background: var(--box-neutral-color);
}

custom-scope-button:hover {
    background: var(--box-neutral-color);
}

custom-scope-button[active='true'] {
    background: var(--box-selected-strong-color);

    font-weight: 500;
}
custom-scope-button[active='true'] span {
    color: white;
}

custom-scope-button input {
    display: none;
    user-select: none;
    -webkit-user-select: none;
}

/* Spacer */

custom-spacer {
    flex: 1;
}

custom-scope-bar-wrapper {
    display: block;
}

/* Toolbar */

custom-toolbar-wrapper {
    padding: 8px;
    display: block;
}

/* Breadcrumbs */

custom-breadcrumbs {
    display: flex;
    gap: var(--space-xs);
}

/* Artboard Thumbnails */

custom-artboard-thumbnail {
    cursor: pointer !important;
    width: 48px;
    height: 48px;
    border-radius: 4px;
    border: 1px solid rgba(0, 0, 0, 0.08);
    background: var(--box-neutral-color);
    padding: 2px;
    display: flex;
    place-items: center;
}
custom-artboard-thumbnail img {
    cursor: pointer !important;
}

custom-artboard-thumbnail:hover {
    border: 1px solid rgba(0, 0, 0, 0.16);
}
custom-artboard-thumbnail > * {
    max-height: 100%;
    margin: 0 auto;
}

/* Avatar */

custom-avatar {
    border-radius: 100px;
    display: block;
    overflow: hidden;
    width: 32px;
    height: 32px;
}

/* Tabs */

custom-tabs {
    display: flex;
    flex-shrink: 0;
    justify-content: space-between;
}
custom-tab {
    text-align: center;
    flex: 1;
}
custom-tab a {
    box-sizing: border-box;
    width: 100%;
    display: block;
    padding: var(--space-s);
}

custom-tab[active='true'] {
    box-shadow: inset 0px -2px 0 0px var(--box-selected-strong-color);
    font-weight: bold;
}

custom-tab + custom-tab {
    border-left: 1px solid rgba(0, 0, 0, 0.08);
}

/* Gap */
custom-gap {
    display: block;
    min-height: 16px;
    background: var(--box-neutral-color);
    box-shadow: inset 0 2px 6px 0px rgba(0, 0, 0, 0.08);
}

/* Scroll View */
custom-scroll-view {
    display: block;
    overflow: auto;
    flex: 1;
    user-select: none;
    -webkit-user-select: none;
}

/* Separators */

[separator='top'] {
    border-top: 1px solid rgba(0, 0, 0, 0.08);
}
[separator='bottom'] {
    border-bottom: 1px solid rgba(0, 0, 0, 0.08);
}
[separator='right'] {
    border-right: 1px solid rgba(0, 0, 0, 0.08);
}
[separator='left'] {
    border-left: 1px solid rgba(0, 0, 0, 0.08);
}
[separator='between'] > * + * {
    border-top: 1px solid rgba(0, 0, 0, 0.08);
}

/* Palette Item (List items, selectable items, …) */

custom-palette-item {
    display: block;
    padding: var(--space-xs) var(--space-s);
    cursor: default;
    user-select: none;
    -webkit-user-select: none;
}

custom-palette-item * {
    cursor: default;
}
custom-palette-item:not([hover='off']):hover {
    background: rgba(0, 0, 0, 0.04);
}
custom-palette-item:not([hover='off']):active {
    background: rgba(0, 0, 0, 0.12);
}
custom-palette-item[disabled='true'] {
    opacity: 0.5;
    pointer-events: none;
}
[show-on-hover='true'] {
    opacity: 0;
}
custom-palette-item:hover > [show-on-hover='true'],
custom-h-stack:hover > [show-on-hover='true'] {
    opacity: 1;
}

custom-palette-item[selectable]:focus,
custom-palette-item[selectable]:focus-within {
    box-shadow: inset 0 0 0 2px var(--box-selected-strong-color);
    outline: none;
    color: white;
    background: var(--box-selected-strong-color);
}

custom-palette-item[selectable]:focus * {
    color: white;
}

custom-palette-item[border='true'] {
    border: 1px solid rgba(0, 0, 0, 0.12);
    border-radius: 8px;
}
custom-palette-item[border='true'] * {
    cursor: pointer !important;
}

/* Grid (Media Library, …) */

custom-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
}

custom-grid-item {
    background-image: url(../assets/images/transparent.png);
    background: white;
    background-size: 8px;
    display: flex;
    border: 1px solid #eaebeb;
    border-radius: 4px;

    /* 
        Just setting "height" causes a visible glitch after initial render.
        So we’re brute-forcing it.
     */
    min-height: calc((100vw - 128px) / 3);
    max-height: calc((100vw - 128px) / 3);

    animation: fade-in 0.25s both;
    user-select: none;
    -webkit-user-select: none;
    position: relative;

    padding: var(--space-s);

    justify-content: center;
    align-items: center;
}
custom-grid-item img {
    cursor: grab;
    transition: opacity 0.15s;
}
custom-grid-item img:hover {
    opacity: 0.5 !important;
}

custom-grid-item:hover {
    opacity: 0.6;
}

custom-grid-item:focus {
    border-radius: 4px;
    border: 1px solid transparent;
    outline: none;
    box-shadow: inset 0 0 0 2px var(--box-selected-strong-color);
}

custom-grid-item-ghost {
    pointer-events: none;
    display: grid;
    width: 100%;
    height: 100%;
    place-items: center;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 2;
    isolation: isolate;
}

custom-grid-item .ghost {
    position: absolute;
    animation: dissolve ease-in-out 0.25s both;
    z-index: 100;
    isolation: isolate;
}

custom-grid[columns='3'] {
    grid-template-columns: repeat(3, 1fr);
}

custom-grid[columns='6'] {
    grid-template-columns: repeat(6, 1fr);
}

/* Dialog */

custom-dialog {
    position: fixed;
    top: 0;
    left: 0;
    /* High z-index to work against @frontify/fondue Slider which has z-index: 10 */
    z-index: 20;
    width: 100%;
    height: 100vh;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    padding: 0.75rem;
    overflow: hidden;
}

custom-dialog-content {
    background: white;
    width: 100%;
    border-radius: 8px;
    overflow: hidden;
}

/* Dim is meant to be used with a Dialog */

custom-dim {
    width: 100%;
    height: 100vh;
    position: fixed;
    background: rgba(0, 0, 0, 0.5);
    left: 0;
    top: 0;
    z-index: 1;
}

/* Keyframes */

@keyframes dissolve {
    from {
    }
    to {
        transform: scale(1.5);
        opacity: 0;
    }
}

@keyframes fade-in {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}

/* Hack to prevent the wrapping button of the flyout trigger to show up  */

[data-test-id='flyout-trigger'] {
    -webkit-appearance: none;
    background: none;
}

/* Hack to always show a pointer for icons inside Button */
button svg,
button svg * {
    cursor: pointer;
}

[cursor='pointer'],
[cursor='pointer'] * {
    cursor: pointer !important;
}
[cursor='default'],
[cursor='default'] * {
    cursor: default !important;
}

/* Sync Button */

custom-sync-button {
    display: flex;
    min-width: 40px;
    min-height: 40px;
    justify-content: center;
    align-items: center;
    cursor: pointer;
}

custom-sync-button[disabled='true'] {
    pointer-events: none;
}
custom-sync-button[variant='add'] {
    background: #2d3232;
    background: rgb(234, 235, 235);

    /* color: white; */
    border-radius: 40px;
}
custom-sync-button[variant='add']:hover {
    background: #4a5252;
    background: rgb(213, 214, 214);
}

/* Variant: Same */
custom-sync-button[variant='same'] {
    background: #f2f8f6;
    color: white;
    border-radius: 40px;
}
custom-sync-button[variant='same']:hover {
    background: #f2f8f6;
}

/* Variant: Pull */
custom-sync-button[variant='pull'] {
    background: #f1f3f9;
    color: white;
    border-radius: 40px;
}
custom-sync-button[variant='pull']:hover {
    background: #e3e8f6;
}

/* Variant: Push */
custom-sync-button[variant='push'] {
    background: #f1f3f9;
    color: white;
    border-radius: 40px;
}
custom-sync-button[variant='push']:hover {
    background: #e3e8f6;
}

/* Variant: Conflict */
custom-sync-button[variant='conflict'] {
    background: #fcf8ee;
    border-radius: 40px;
}
custom-sync-button[variant='conflict']:hover {
    background: #e1d4be;
}

/* Variant: Conflict */
custom-sync-button[variant='error'] {
    background: #fcf8ee;
    border-radius: 40px;
}
custom-sync-button[variant='error']:hover {
    background: #e1d4be;
}

a {
    color: var(--box-selected-strong-color);
    cursor: pointer;
}
a[href]:hover,
a[target]:hover {
    text-decoration: underline;
}

/* Custom Badge */
custom-badge {
    display: inline-block;
    min-width: 16px;
    max-width: 24px;
    border-radius: 48px;
    background: var(--box-selected-strong-color);
    color: white;
}

/* Custom Combo Field */
custom-combo-field {
    border: 1px solid rgba(0, 0, 0, 0.16);
    border-radius: 6px;
    overflow: hidden;
    display: flex;

    background: white;
    gap: var(--space-xxs);
    justify-content: space-between;
}
custom-combo-field:focus-within {
    /* tw-border-black-90 */
    border: 1px solid rgba(0, 0, 0, 0.9);
}
custom-combo-field > div:first-child {
    border: none !important;
    outline: none;
    width: 100%;
}
custom-combo-field > * + * {
    border-left: 1px solid rgba(0, 0, 0, 0.12);
    border-radius: 0 !important;
}
custom-combo-field .tw-rounded {
    border-radius: 0 !important;
}

/* Custom status bar */
custom-status-bar {
    display: block;
    background: white;
}

/* Custom Input Field */

input[variant='naked'] {
    border: none;
    color: initial;
    font-size: 14px;
    width: 100%;
    padding-left: 4px;
}
input[variant='naked']:focus {
    outline: none;
    color: initial;
}

[figures='tabular'] {
    font-feature-settings: 'tnum';
}

[custom-pointer-events='none'] {
    pointer-events: none;
}

code {
    line-height: 1.5;
}
